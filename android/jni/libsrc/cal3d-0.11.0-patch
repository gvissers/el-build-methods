diff --git a/src/cal3d/hardwaremodel.cpp b/src/cal3d/hardwaremodel.cpp
index d8165af..888d10b 100644
--- a/src/cal3d/hardwaremodel.cpp
+++ b/src/cal3d/hardwaremodel.cpp
@@ -24,6 +24,7 @@
 #include "cal3d/coreskeleton.h"
 #include "cal3d/skeleton.h"
 
+#include <string.h>
 
  /*****************************************************************************/
 /** Constructs the hardware model instance.
diff --git a/src/cal3d/loader.cpp b/src/cal3d/loader.cpp
index 65104de..b8e5b8b 100644
--- a/src/cal3d/loader.cpp
+++ b/src/cal3d/loader.cpp
@@ -886,7 +886,7 @@ CalCoreKeyframe* CalLoader::loadCoreKeyframe(CalDataSource& dataSrc)
   if(!dataSrc.ok())
   {
     dataSrc.setError();
-    return false;
+    return 0;
   }
 
   // allocate a new core keyframe instance
@@ -1338,13 +1338,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(stricmp(skeleton->Attribute("MAGIC"),Cal::SKELETON_XMLFILE_MAGIC)!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		if(atoi(skeleton->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 		{
 			CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		skeleton = skeleton->NextSiblingElement();
@@ -1353,19 +1353,19 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 	if(!skeleton || stricmp(skeleton->Value(),"SKELETON")!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(skeleton->Attribute("MAGIC")!=NULL && stricmp(skeleton->Attribute("MAGIC"),Cal::SKELETON_XMLFILE_MAGIC)!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(skeleton->Attribute("VERSION")!=NULL && atoi(skeleton->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 	{
 		CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 
@@ -1383,7 +1383,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(stricmp(bone->Value(),"BONE")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}    
 
 		std::string strName=bone->Attribute("NAME");
@@ -1395,7 +1395,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!translation || stricmp( translation->Value(),"TRANSLATION")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		float tx, ty, tz;
@@ -1404,13 +1404,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!node)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}    
 		TiXmlText* translationdata = node->ToText();
 		if(!translationdata)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}    
 		str.clear();
 		str << translationdata->Value();
@@ -1422,7 +1422,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!rotation || stricmp(rotation->Value(),"ROTATION")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		float rx, ry, rz, rw;
@@ -1431,13 +1431,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!node)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		TiXmlText* rotationdata = node->ToText();
 		if(!rotationdata)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		str.clear();
 		str << rotationdata->Value();
@@ -1450,7 +1450,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!rotation || stricmp(translationBoneSpace->Value(),"LOCALTRANSLATION")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		float txBoneSpace, tyBoneSpace, tzBoneSpace;
@@ -1459,13 +1459,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!node)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		TiXmlText* translationBoneSpacedata = node->ToText();
 		if(!translationBoneSpacedata)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		str.clear();
 		str << translationBoneSpacedata->Value();
@@ -1477,7 +1477,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!rotationBoneSpace || stricmp(rotationBoneSpace->Value(),"LOCALROTATION")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		float rxBoneSpace, ryBoneSpace, rzBoneSpace, rwBoneSpace;
@@ -1486,13 +1486,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!node)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		TiXmlText* rotationBoneSpacedata = node->ToText();
 		if(!rotationBoneSpacedata)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		str.clear();
 		str << rotationBoneSpacedata->Value();
@@ -1504,7 +1504,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!parent ||stricmp(parent->Value(),"PARENTID")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 
@@ -1514,13 +1514,13 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 		if(!node)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		TiXmlText* parentid = node->ToText();
 		if(!parentid)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 		parentId = atoi(parentid->Value());
 
@@ -1566,7 +1566,7 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 			{
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
 				delete pCoreBone;
-				return false;
+				return 0;
 			}
 
 			TiXmlNode *node= child->FirstChild();
@@ -1574,14 +1574,14 @@ CalCoreSkeletonPtr CalLoader::loadXmlCoreSkeleton(const std::string& strFilename
 			{
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
 				delete pCoreBone;
-				return false;
+				return 0;
 			}
 			TiXmlText* childid = node->ToText();
 			if(!childid)
 			{
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
 				delete pCoreBone;
-				return false;
+				return 0;
 			}
 
 			int childId = atoi(childid->Value());
@@ -1633,7 +1633,7 @@ CalCoreAnimationPtr CalLoader::loadXmlCoreAnimation(const std::string& strFilena
 	if(!animation)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(stricmp(animation->Value(),"HEADER")==0)
@@ -1641,13 +1641,13 @@ CalCoreAnimationPtr CalLoader::loadXmlCoreAnimation(const std::string& strFilena
 		if(stricmp(animation->Attribute("MAGIC"),Cal::ANIMATION_XMLFILE_MAGIC)!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		if(atoi(animation->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 		{
 			CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		animation = animation->NextSiblingElement();
@@ -1656,19 +1656,19 @@ CalCoreAnimationPtr CalLoader::loadXmlCoreAnimation(const std::string& strFilena
 	if(!animation || stricmp(animation->Value(),"ANIMATION")!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(animation->Attribute("MAGIC") !=NULL && stricmp(animation->Attribute("MAGIC"),Cal::ANIMATION_XMLFILE_MAGIC)!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(animation->Attribute("VERSION")!=NULL && atoi(animation->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 	{
 		CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	int trackCount= atoi(animation->Attribute("NUMTRACKS"));
@@ -1880,7 +1880,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 	if(!mesh)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(stricmp(mesh->Value(),"HEADER")==0)
@@ -1888,13 +1888,13 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 		if(stricmp(mesh->Attribute("MAGIC"),Cal::MESH_XMLFILE_MAGIC)!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		if(atoi(mesh->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 		{
 			CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		mesh = mesh->NextSiblingElement();
@@ -1902,19 +1902,19 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 	if(!mesh || stricmp(mesh->Value(),"MESH")!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(mesh->Attribute("MAGIC")!=NULL && stricmp(mesh->Attribute("MAGIC"),Cal::MESH_XMLFILE_MAGIC)!=0)
 	{
 		CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	if(mesh->Attribute("VERSION")!=NULL && atoi(mesh->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
 	{
 		CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-		return false;
+		return 0;
 	}
 
 	// get the number of submeshes
@@ -1937,7 +1937,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 		if(!submesh || stricmp(submesh->Value(),"SUBMESH")!=0)
 		{
 			CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-			return false;
+			return 0;
 		}
 
 		// get the material thread id of the submesh
@@ -1986,7 +1986,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}      
 
 			CalCoreSubmesh::Vertex Vertex;
@@ -1996,7 +1996,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 
 			node = pos->FirstChild();
@@ -2004,14 +2004,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}      
 			TiXmlText* posdata = node->ToText();
 			if(!posdata)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 			str.clear();
 			str << posdata->Value();
@@ -2022,7 +2022,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 
 			node = norm->FirstChild();
@@ -2030,14 +2030,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 			TiXmlText* normdata = node->ToText();
 			if(!normdata)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 			str.clear();
 			str << normdata->Value();
@@ -2051,14 +2051,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				TiXmlText* collapseid = node->ToText();
 				if(!collapseid)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				Vertex.collapseId = atoi(collapseid->Value());
 
@@ -2067,7 +2067,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 
 				node = collapseCount->FirstChild();
@@ -2075,14 +2075,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				TiXmlText* collapseCountdata = node->ToText();
 				if(!collapseCountdata)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				Vertex.faceCollapseCount= atoi(collapseCountdata->Value());
 				collapse = collapseCount->NextSiblingElement();        
@@ -2106,7 +2106,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 
 				node = texcoord->FirstChild();
@@ -2114,14 +2114,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				TiXmlText* texcoorddata = node->ToText();
 				if(!texcoorddata)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				str.clear();
 				str << texcoorddata->Value();
@@ -2161,7 +2161,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 
 				node = influence->FirstChild();
@@ -2169,14 +2169,14 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				TiXmlText* influencedata = node->ToText();
 				if(!influencedata)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 
 				Vertex.vectorInfluence[influenceId].boneId = atoi(influence->Attribute("ID"));
@@ -2202,21 +2202,21 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				node = physique->FirstChild();
 				if(!node)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 				TiXmlText* physiquedata = node->ToText();
 				if(!physiquedata)
 				{
 					delete pCoreSubmesh;
 					CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-					return false;
+					return 0;
 				}
 
 				physicalProperty.weight = (float) atof(physiquedata->Value());
@@ -2241,7 +2241,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 			str.clear();
 			str << spring->Attribute("VERTEXID");
@@ -2266,7 +2266,7 @@ CalCoreMeshPtr CalLoader::loadXmlCoreMesh(const std::string& strFilename)
 			{
 				delete pCoreSubmesh;
 				CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-				return false;
+				return 0;
 			}
 
 			int tmp[3];
@@ -2336,7 +2336,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!material)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-        return false;
+        return 0;
   }
 
   if(stricmp(material->Value(),"HEADER")==0)
@@ -2344,13 +2344,13 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
     if(stricmp(material->Attribute("MAGIC"),Cal::MATERIAL_XMLFILE_MAGIC)!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-          return false;
+          return 0;
     }
 
     if(atoi(material->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
     {
     CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-          return false;
+          return 0;
     }
 
     material = material->NextSiblingElement();
@@ -2359,19 +2359,19 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!material||stricmp(material->Value(),"MATERIAL")!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-      return false;
+      return 0;
   }
 
   if(material->Attribute("MAGIC")!=NULL && stricmp(material->Attribute("MAGIC"),Cal::MATERIAL_XMLFILE_MAGIC)!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-        return false;
+        return 0;
   }
 
   if(material->Attribute("VERSION") != NULL && atoi(material->Attribute("VERSION")) < Cal::EARLIEST_COMPATIBLE_FILE_VERSION )
   {
     CalError::setLastError(CalError::INCOMPATIBLE_FILE_VERSION, __FILE__, __LINE__, strFilename);
-        return false;
+        return 0;
   }
 
   CalCoreMaterialPtr pCoreMaterial = new CalCoreMaterial();
@@ -2385,7 +2385,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!ambient ||stricmp(ambient->Value(),"AMBIENT")!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
 
   CalCoreMaterial::Color ambientColor; 
@@ -2393,13 +2393,13 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!node)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   TiXmlText* ambientdata = node->ToText();
   if(!ambientdata)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   str << ambientdata->Value();
   str >> r >> g >> b >> a;
@@ -2412,7 +2412,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!diffuse || stricmp(diffuse->Value(),"DIFFUSE")!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
 
   CalCoreMaterial::Color diffuseColor; 
@@ -2420,13 +2420,13 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!node)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   TiXmlText* diffusedata = node->ToText();
   if(!diffusedata)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   str.clear();
   str << diffusedata->Value();
@@ -2441,7 +2441,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!specular||stricmp(specular->Value(),"SPECULAR")!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
 
   CalCoreMaterial::Color specularColor; 
@@ -2449,13 +2449,13 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!node)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   TiXmlText* speculardata = node->ToText();
   if(!speculardata)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   str.clear();
   str << speculardata->Value();
@@ -2469,7 +2469,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!shininess||stricmp(shininess->Value(),"SHININESS")!=0)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
 
   float fshininess;
@@ -2477,13 +2477,13 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
   if(!node)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   TiXmlText* shininessdata = node->ToText();
   if(!shininessdata)
   {
     CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-    return false;
+    return 0;
   }
   fshininess = (float)atof(shininessdata->Value());
 
@@ -2502,7 +2502,7 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
     if(!map||stricmp(map->Value(),"MAP")!=0)
     {
       CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-      return false;
+      return 0;
     }
     
 
@@ -2510,14 +2510,14 @@ CalCoreMaterialPtr CalLoader::loadXmlCoreMaterial(const std::string& strFilename
     if(!node)
     {
       CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-      return false;
+      return 0;
     }
 
     TiXmlText* mapfile = node->ToText();
     if(!mapfile)
     {
       CalError::setLastError(CalError::INVALID_FILE_FORMAT, __FILE__, __LINE__, strFilename);
-      return false;
+      return 0;
     }
 
     MatFileName.push_back(mapfile->Value());
diff --git a/src/cal3d/platform.cpp b/src/cal3d/platform.cpp
index 41483bd..dda44a9 100644
--- a/src/cal3d/platform.cpp
+++ b/src/cal3d/platform.cpp
@@ -18,6 +18,8 @@
 
 #include "cal3d/platform.h"
 
+#include <string.h>
+
  /*****************************************************************************/
 /** Constructs the platform instance.
   *
diff --git a/src/cal3d/renderer.cpp b/src/cal3d/renderer.cpp
index f348bc6..a63f932 100644
--- a/src/cal3d/renderer.cpp
+++ b/src/cal3d/renderer.cpp
@@ -29,6 +29,8 @@
 #include "cal3d/coresubmesh.h"
 #include "cal3d/physique.h"
 
+#include <string.h>
+
  /*****************************************************************************/
 /** Constructs the renderer instance.
   *
diff --git a/src/cal3d/submesh.cpp b/src/cal3d/submesh.cpp
index a374595..c77f32e 100644
--- a/src/cal3d/submesh.cpp
+++ b/src/cal3d/submesh.cpp
@@ -16,6 +16,7 @@
 #include "cal3d/error.h"
 #include "cal3d/coresubmesh.h"
 
+#include <string.h>
 
 CalSubmesh::CalSubmesh(CalCoreSubmesh* coreSubmesh)
 {
diff --git a/src/cal3d_converter.cpp b/src/cal3d_converter.cpp
index 72a7de7..2db0573 100644
--- a/src/cal3d_converter.cpp
+++ b/src/cal3d_converter.cpp
@@ -11,6 +11,8 @@
 
 #include "cal3d/cal3d.h"
 
+#include <strings.h>
+
 #define SKELETON 0
 #define MESH 1
 #define ANIMATION 2
